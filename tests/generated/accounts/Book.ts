/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beet from '@metaplex-foundation/beet'
import * as beetSolana from '@metaplex-foundation/beet-solana'

/**
 * Arguments used to create {@link Book}
 * @category Accounts
 * @category generated
 */
export type BookArgs = {
  owner: web3.PublicKey
  mint: web3.PublicKey
  currentStakingStart: beet.bignum
  level: beet.bignum
}

const bookDiscriminator = [121, 34, 121, 35, 91, 62, 85, 222]
/**
 * Holds the data for the {@link Book} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class Book implements BookArgs {
  private constructor(
    readonly owner: web3.PublicKey,
    readonly mint: web3.PublicKey,
    readonly currentStakingStart: beet.bignum,
    readonly level: beet.bignum
  ) {}

  /**
   * Creates a {@link Book} instance from the provided args.
   */
  static fromArgs(args: BookArgs) {
    return new Book(args.owner, args.mint, args.currentStakingStart, args.level)
  }

  /**
   * Deserializes the {@link Book} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0
  ): [Book, number] {
    return Book.deserialize(accountInfo.data, offset)
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link Book} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey
  ): Promise<Book> {
    const accountInfo = await connection.getAccountInfo(address)
    if (accountInfo == null) {
      throw new Error(`Unable to find Book account at ${address}`)
    }
    return Book.fromAccountInfo(accountInfo, 0)[0]
  }

  /**
   * Deserializes the {@link Book} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [Book, number] {
    return bookBeet.deserialize(buf, offset)
  }

  /**
   * Serializes the {@link Book} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return bookBeet.serialize({
      accountDiscriminator: bookDiscriminator,
      ...this,
    })
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link Book}
   */
  static get byteSize() {
    return bookBeet.byteSize
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link Book} data from rent
   *
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    connection: web3.Connection,
    commitment?: web3.Commitment
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      Book.byteSize,
      commitment
    )
  }

  /**
   * Determines if the provided {@link Buffer} has the correct byte size to
   * hold {@link Book} data.
   */
  static hasCorrectByteSize(buf: Buffer, offset = 0) {
    return buf.byteLength - offset === Book.byteSize
  }

  /**
   * Returns a readable version of {@link Book} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      owner: this.owner.toBase58(),
      mint: this.mint.toBase58(),
      currentStakingStart: (() => {
        const x = <{ toNumber: () => number }>this.currentStakingStart
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      level: (() => {
        const x = <{ toNumber: () => number }>this.level
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
    }
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const bookBeet = new beet.BeetStruct<
  Book,
  BookArgs & {
    accountDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['owner', beetSolana.publicKey],
    ['mint', beetSolana.publicKey],
    ['currentStakingStart', beet.u64],
    ['level', beet.u64],
  ],
  Book.fromArgs,
  'Book'
)
