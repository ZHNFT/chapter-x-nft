/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import { EditConfigArgs, editConfigArgsBeet } from '../types/EditConfigArgs'

/**
 * @category Instructions
 * @category EditConfig
 * @category generated
 */
export type EditConfigInstructionArgs = {
  args: EditConfigArgs
}
/**
 * @category Instructions
 * @category EditConfig
 * @category generated
 */
const editConfigStruct = new beet.BeetArgsStruct<
  EditConfigInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['args', editConfigArgsBeet],
  ],
  'EditConfigInstructionArgs'
)
/**
 * Accounts required by the _editConfig_ instruction
 *
 * @property [_writable_, **signer**] owner
 * @property [_writable_] config
 * @category Instructions
 * @category EditConfig
 * @category generated
 */
export type EditConfigInstructionAccounts = {
  owner: web3.PublicKey
  config: web3.PublicKey
}

const editConfigInstructionDiscriminator = [
  244, 197, 215, 48, 246, 184, 210, 138,
]

/**
 * Creates a _EditConfig_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category EditConfig
 * @category generated
 */
export function createEditConfigInstruction(
  accounts: EditConfigInstructionAccounts,
  args: EditConfigInstructionArgs
) {
  const { owner, config } = accounts

  const [data] = editConfigStruct.serialize({
    instructionDiscriminator: editConfigInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: owner,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: config,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: web3.SYSVAR_RENT_PUBKEY,
      isWritable: false,
      isSigner: false,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId: new web3.PublicKey(
      '3JYJq2FJqK2sR1ySqYVchE3dyYwdaspPEmWu83rVkhUi'
    ),
    keys,
    data,
  })
  return ix
}
