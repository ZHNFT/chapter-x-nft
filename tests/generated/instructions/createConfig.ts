/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import {
  CreateConfigArgs,
  createConfigArgsBeet,
} from '../types/CreateConfigArgs'

/**
 * @category Instructions
 * @category CreateConfig
 * @category generated
 */
export type CreateConfigInstructionArgs = {
  args: CreateConfigArgs
}
/**
 * @category Instructions
 * @category CreateConfig
 * @category generated
 */
const createConfigStruct = new beet.BeetArgsStruct<
  CreateConfigInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['args', createConfigArgsBeet],
  ],
  'CreateConfigInstructionArgs'
)
/**
 * Accounts required by the _createConfig_ instruction
 *
 * @property [_writable_, **signer**] owner
 * @property [_writable_] config
 * @category Instructions
 * @category CreateConfig
 * @category generated
 */
export type CreateConfigInstructionAccounts = {
  owner: web3.PublicKey
  config: web3.PublicKey
}

const createConfigInstructionDiscriminator = [
  201, 207, 243, 114, 75, 111, 47, 189,
]

/**
 * Creates a _CreateConfig_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category CreateConfig
 * @category generated
 */
export function createCreateConfigInstruction(
  accounts: CreateConfigInstructionAccounts,
  args: CreateConfigInstructionArgs
) {
  const { owner, config } = accounts

  const [data] = createConfigStruct.serialize({
    instructionDiscriminator: createConfigInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: owner,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: config,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: web3.SYSVAR_RENT_PUBKEY,
      isWritable: false,
      isSigner: false,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId: new web3.PublicKey(
      '3JYJq2FJqK2sR1ySqYVchE3dyYwdaspPEmWu83rVkhUi'
    ),
    keys,
    data,
  })
  return ix
}
