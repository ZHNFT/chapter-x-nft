/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

type ErrorWithCode = Error & { code: number }
type MaybeErrorWithCode = ErrorWithCode | null | undefined

const createErrorFromCodeLookup: Map<number, () => ErrorWithCode> = new Map()
const createErrorFromNameLookup: Map<string, () => ErrorWithCode> = new Map()

/**
 * PublicKeyMismatch: 'PublicKey Mismatch'
 *
 * @category Errors
 * @category generated
 */
export class PublicKeyMismatchError extends Error {
  readonly code: number = 0x1770
  readonly name: string = 'PublicKeyMismatch'
  constructor() {
    super('PublicKey Mismatch')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, PublicKeyMismatchError)
    }
  }
}

createErrorFromCodeLookup.set(0x1770, () => new PublicKeyMismatchError())
createErrorFromNameLookup.set(
  'PublicKeyMismatch',
  () => new PublicKeyMismatchError()
)

/**
 * IncorrectOwner: 'Incorrect Owner'
 *
 * @category Errors
 * @category generated
 */
export class IncorrectOwnerError extends Error {
  readonly code: number = 0x1771
  readonly name: string = 'IncorrectOwner'
  constructor() {
    super('Incorrect Owner')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, IncorrectOwnerError)
    }
  }
}

createErrorFromCodeLookup.set(0x1771, () => new IncorrectOwnerError())
createErrorFromNameLookup.set('IncorrectOwner', () => new IncorrectOwnerError())

/**
 * UninitializedAccount: 'Uninitialized Account'
 *
 * @category Errors
 * @category generated
 */
export class UninitializedAccountError extends Error {
  readonly code: number = 0x1772
  readonly name: string = 'UninitializedAccount'
  constructor() {
    super('Uninitialized Account')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, UninitializedAccountError)
    }
  }
}

createErrorFromCodeLookup.set(0x1772, () => new UninitializedAccountError())
createErrorFromNameLookup.set(
  'UninitializedAccount',
  () => new UninitializedAccountError()
)

/**
 * NumericalOverflow: 'Numerical Overflow'
 *
 * @category Errors
 * @category generated
 */
export class NumericalOverflowError extends Error {
  readonly code: number = 0x1773
  readonly name: string = 'NumericalOverflow'
  constructor() {
    super('Numerical Overflow')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NumericalOverflowError)
    }
  }
}

createErrorFromCodeLookup.set(0x1773, () => new NumericalOverflowError())
createErrorFromNameLookup.set(
  'NumericalOverflow',
  () => new NumericalOverflowError()
)

/**
 * StakingIsLocked: 'Staking is locked'
 *
 * @category Errors
 * @category generated
 */
export class StakingIsLockedError extends Error {
  readonly code: number = 0x1774
  readonly name: string = 'StakingIsLocked'
  constructor() {
    super('Staking is locked')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, StakingIsLockedError)
    }
  }
}

createErrorFromCodeLookup.set(0x1774, () => new StakingIsLockedError())
createErrorFromNameLookup.set(
  'StakingIsLocked',
  () => new StakingIsLockedError()
)

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export function errorFromCode(code: number): MaybeErrorWithCode {
  const createError = createErrorFromCodeLookup.get(code)
  return createError != null ? createError() : null
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export function errorFromName(name: string): MaybeErrorWithCode {
  const createError = createErrorFromNameLookup.get(name)
  return createError != null ? createError() : null
}
